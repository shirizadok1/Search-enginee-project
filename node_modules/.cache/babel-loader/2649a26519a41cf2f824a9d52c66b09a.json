{"ast":null,"code":"import PromisePolyfill from 'promise-polyfill';\nimport fetchPonyfill from 'fetch-ponyfill';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _regeneratorRuntime() {\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function () {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) keys.push(key);\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function () {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    catch: function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nfunction btoa(string) {\n  string = String(string);\n  var bitmap,\n      a,\n      b,\n      c,\n      result = '',\n      i = 0,\n      rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length;) {\n    if ((a = string.charCodeAt(i++)) > 255 || (b = string.charCodeAt(i++)) > 255 || (c = string.charCodeAt(i++)) > 255) throw new TypeError(\"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\");\n    bitmap = a << 16 | b << 8 | c;\n    result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63) + b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);\n  } // If there's need of padding, replace the last 'A's with equal signs\n\n\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n\nfunction atob(string) {\n  // atob can work with strings with whitespaces, even inside the encoded part,\n  // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n  string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n  if (!b64re.test(string)) throw new TypeError(\"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\"); // Adding the padding if missing, for semplicity\n\n  string += '=='.slice(2 - (string.length & 3));\n  var bitmap,\n      result = '',\n      r1,\n      r2,\n      i = 0;\n\n  for (; i < string.length;) {\n    bitmap = b64.indexOf(string.charAt(i++)) << 18 | b64.indexOf(string.charAt(i++)) << 12 | (r1 = b64.indexOf(string.charAt(i++))) << 6 | (r2 = b64.indexOf(string.charAt(i++)));\n    result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);\n  }\n\n  return result;\n}\n\nvar version = \"2.7.0\";\n/**\n * Base-64 encodes a (JSON-castable) object.\n *\n * @param obj - The object to encode.\n */\n\nvar encode64 = function encode64(obj) {\n  return btoa(JSON.stringify(obj));\n};\n/**\n * Generates a client header.\n *\n * @param givenLabel\n */\n\n\nvar clientHeader = function clientHeader(givenLabel) {\n  var label = \"@formspree/core@\".concat(version);\n  if (!givenLabel) return label;\n  return \"\".concat(givenLabel, \" \").concat(label);\n};\n/**\n * The current timestamp.\n */\n\n\nvar now = function now() {\n  // @ts-ignore\n  return 1 * new Date();\n};\n\nvar appendExtraData = function appendExtraData(formData, prop, value) {\n  if (formData instanceof FormData) {\n    formData.append(prop, value);\n  } else {\n    formData = Object.assign(formData, _defineProperty({}, prop, value));\n  }\n};\n\nvar handleSCA = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var stripePromise, response, responseData, payload, data, fetchImpl, request, url, stripeResult, resSubmitResponse, resSubmitData;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            stripePromise = _ref.stripePromise, response = _ref.response, responseData = _ref.responseData, payload = _ref.payload, data = _ref.data, fetchImpl = _ref.fetchImpl, request = _ref.request, url = _ref.url;\n            _context.next = 3;\n            return stripePromise.handleCardAction(responseData.stripe.paymentIntentClientSecret);\n\n          case 3:\n            stripeResult = _context.sent;\n\n            if (!stripeResult.error) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              response: response,\n              body: {\n                errors: [{\n                  code: 'STRIPE_CLIENT_ERROR',\n                  message: 'Stripe SCA error',\n                  field: 'paymentMethod'\n                }]\n              }\n            });\n\n          case 8:\n            if (!payload.paymentMethod.id) {\n              appendExtraData(data, 'paymentMethod', payload.paymentMethod.id);\n            }\n\n            appendExtraData(data, 'paymentIntent', stripeResult.paymentIntent.id);\n            appendExtraData(data, 'resubmitKey', responseData.resubmitKey); // Resubmit the form with the paymentIntent and resubmitKey\n\n            _context.next = 13;\n            return fetchImpl(url, _objectSpread2(_objectSpread2({}, request), {}, {\n              body: JSON.stringify({\n                paymentIntent: stripeResult.paymentIntent.id,\n                resubmitKey: responseData.resubmitKey\n              })\n            }));\n\n          case 13:\n            resSubmitResponse = _context.sent;\n            _context.next = 16;\n            return resSubmitResponse.json();\n\n          case 16:\n            resSubmitData = _context.sent;\n            return _context.abrupt(\"return\", {\n              response: resSubmitResponse,\n              body: resSubmitData\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleSCA(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar webdriver = function webdriver() {\n  return navigator.webdriver || !!document.documentElement.getAttribute(atob('d2ViZHJpdmVy')) || // @ts-ignore\n  !!window.callPhantom || // @ts-ignore\n  !!window._phantom;\n};\n\nvar Session = /*#__PURE__*/function () {\n  function Session() {\n    _classCallCheck(this, Session);\n\n    this.loadedAt = now();\n    this.webdriver = webdriver();\n  }\n\n  _createClass(Session, [{\n    key: \"teardown\",\n    value: function teardown() {}\n  }, {\n    key: \"data\",\n    value: function data() {\n      return {\n        loadedAt: this.loadedAt,\n        webdriver: this.webdriver\n      };\n    }\n  }]);\n\n  return Session;\n}();\n\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    this.project = config.project;\n    this.stripePromise = config.stripePromise;\n    if (typeof window !== 'undefined') this.startBrowserSession();\n  }\n  /**\n   * Starts a browser session.\n   */\n\n\n  _createClass(Client, [{\n    key: \"startBrowserSession\",\n    value: function startBrowserSession() {\n      if (!this.session) {\n        this.session = new Session();\n      }\n    }\n    /**\n     * Teardown the client session.\n     */\n\n  }, {\n    key: \"teardown\",\n    value: function teardown() {\n      if (this.session) this.session.teardown();\n    }\n    /**\n     * Submit a form.\n     *\n     * @param formKey - The form key.\n     * @param data - An object or FormData instance containing submission data.\n     * @param args - An object of form submission data.\n     */\n\n  }, {\n    key: \"submitForm\",\n    value: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(formKey, data) {\n        var opts,\n            endpoint,\n            fetchImpl,\n            url,\n            serializeBody,\n            headers,\n            request,\n            payload,\n            response,\n            responseData,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                endpoint = opts.endpoint || 'https://formspree.io';\n                fetchImpl = opts.fetchImpl || fetchPonyfill({\n                  Promise: PromisePolyfill\n                }).fetch;\n                url = this.project ? \"\".concat(endpoint, \"/p/\").concat(this.project, \"/f/\").concat(formKey) : \"\".concat(endpoint, \"/f/\").concat(formKey);\n\n                serializeBody = function serializeBody(data) {\n                  if (data instanceof FormData) return data;\n                  return JSON.stringify(data);\n                };\n\n                headers = {\n                  Accept: 'application/json',\n                  'Formspree-Client': clientHeader(opts.clientName)\n                };\n\n                if (this.session) {\n                  headers['Formspree-Session-Data'] = encode64(this.session.data());\n                }\n\n                if (!(data instanceof FormData)) {\n                  headers['Content-Type'] = 'application/json';\n                }\n\n                request = {\n                  method: 'POST',\n                  mode: 'cors',\n                  body: serializeBody(data),\n                  headers: headers\n                }; // first check if we need to add the stripe paymentMethod\n\n                if (!(this.stripePromise && opts.createPaymentMethod)) {\n                  _context.next = 29;\n                  break;\n                }\n\n                _context.next = 12;\n                return opts.createPaymentMethod();\n\n              case 12:\n                payload = _context.sent;\n\n                if (!payload.error) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  response: null,\n                  body: {\n                    errors: [{\n                      code: 'STRIPE_CLIENT_ERROR',\n                      message: 'Error creating payment method',\n                      field: 'paymentMethod'\n                    }]\n                  }\n                });\n\n              case 15:\n                // Add the paymentMethod to the data\n                appendExtraData(data, 'paymentMethod', payload.paymentMethod.id); // Send a request to Formspree server to handle the payment method\n\n                _context.next = 18;\n                return fetchImpl(url, _objectSpread2(_objectSpread2({}, request), {}, {\n                  body: data\n                }));\n\n              case 18:\n                response = _context.sent;\n                _context.next = 21;\n                return response.json();\n\n              case 21:\n                responseData = _context.sent;\n\n                if (!(responseData && responseData.stripe && responseData.stripe.requiresAction && responseData.resubmitKey)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.next = 25;\n                return handleSCA({\n                  stripePromise: this.stripePromise,\n                  responseData: responseData,\n                  response: response,\n                  payload: payload,\n                  data: data,\n                  fetchImpl: fetchImpl,\n                  request: request,\n                  url: url\n                });\n\n              case 25:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 26:\n                return _context.abrupt(\"return\", {\n                  response: response,\n                  body: responseData\n                });\n\n              case 29:\n                return _context.abrupt(\"return\", fetchImpl(url, request).then(function (response) {\n                  return response.json().then(function (body) {\n                    return {\n                      body: body,\n                      response: response\n                    };\n                  });\n                }));\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function submitForm(_x, _x2) {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }()\n  }]);\n\n  return Client;\n}();\n/**\n * Constructs the client object.\n */\n\n\nvar createClient = function createClient(config) {\n  return new Client(config);\n};\n/**\n * Fetches the global default client.\n */\n\n\nvar getDefaultClient = function getDefaultClient() {\n  if (!defaultClientSingleton) {\n    defaultClientSingleton = createClient();\n  }\n\n  return defaultClientSingleton;\n};\n/**\n * The global default client. Note, this client may not get torn down.\n */\n\n\nvar defaultClientSingleton;\nexport { Client, createClient, getDefaultClient };","map":null,"metadata":{},"sourceType":"module"}